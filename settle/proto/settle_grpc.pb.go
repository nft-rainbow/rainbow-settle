// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: settle.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SettleClient is the client API for Settle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SettleClient interface {
	Deposite(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*WxOrder, error)
	GetWxOrder(ctx context.Context, in *WxOrderRequest, opts ...grpc.CallOption) (*WxOrder, error)
	RefundQuota(ctx context.Context, in *RefundQuotaRequest, opts ...grpc.CallOption) (*UserBalance, error)
	GetUserBalance(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserBalance, error)
}

type settleClient struct {
	cc grpc.ClientConnInterface
}

func NewSettleClient(cc grpc.ClientConnInterface) SettleClient {
	return &settleClient{cc}
}

func (c *settleClient) Deposite(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*WxOrder, error) {
	out := new(WxOrder)
	err := c.cc.Invoke(ctx, "/rainbowsettle.Settle/Deposite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settleClient) GetWxOrder(ctx context.Context, in *WxOrderRequest, opts ...grpc.CallOption) (*WxOrder, error) {
	out := new(WxOrder)
	err := c.cc.Invoke(ctx, "/rainbowsettle.Settle/GetWxOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settleClient) RefundQuota(ctx context.Context, in *RefundQuotaRequest, opts ...grpc.CallOption) (*UserBalance, error) {
	out := new(UserBalance)
	err := c.cc.Invoke(ctx, "/rainbowsettle.Settle/RefundQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settleClient) GetUserBalance(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserBalance, error) {
	out := new(UserBalance)
	err := c.cc.Invoke(ctx, "/rainbowsettle.Settle/GetUserBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SettleServer is the server API for Settle service.
// All implementations must embed UnimplementedSettleServer
// for forward compatibility
type SettleServer interface {
	Deposite(context.Context, *DepositRequest) (*WxOrder, error)
	GetWxOrder(context.Context, *WxOrderRequest) (*WxOrder, error)
	RefundQuota(context.Context, *RefundQuotaRequest) (*UserBalance, error)
	GetUserBalance(context.Context, *UserID) (*UserBalance, error)
	mustEmbedUnimplementedSettleServer()
}

// UnimplementedSettleServer must be embedded to have forward compatible implementations.
type UnimplementedSettleServer struct {
}

func (UnimplementedSettleServer) Deposite(context.Context, *DepositRequest) (*WxOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposite not implemented")
}
func (UnimplementedSettleServer) GetWxOrder(context.Context, *WxOrderRequest) (*WxOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWxOrder not implemented")
}
func (UnimplementedSettleServer) RefundQuota(context.Context, *RefundQuotaRequest) (*UserBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundQuota not implemented")
}
func (UnimplementedSettleServer) GetUserBalance(context.Context, *UserID) (*UserBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBalance not implemented")
}
func (UnimplementedSettleServer) mustEmbedUnimplementedSettleServer() {}

// UnsafeSettleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SettleServer will
// result in compilation errors.
type UnsafeSettleServer interface {
	mustEmbedUnimplementedSettleServer()
}

func RegisterSettleServer(s grpc.ServiceRegistrar, srv SettleServer) {
	s.RegisterService(&Settle_ServiceDesc, srv)
}

func _Settle_Deposite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettleServer).Deposite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rainbowsettle.Settle/Deposite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettleServer).Deposite(ctx, req.(*DepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settle_GetWxOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WxOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettleServer).GetWxOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rainbowsettle.Settle/GetWxOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettleServer).GetWxOrder(ctx, req.(*WxOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settle_RefundQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettleServer).RefundQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rainbowsettle.Settle/RefundQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettleServer).RefundQuota(ctx, req.(*RefundQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settle_GetUserBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettleServer).GetUserBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rainbowsettle.Settle/GetUserBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettleServer).GetUserBalance(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

// Settle_ServiceDesc is the grpc.ServiceDesc for Settle service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Settle_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rainbowsettle.Settle",
	HandlerType: (*SettleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Deposite",
			Handler:    _Settle_Deposite_Handler,
		},
		{
			MethodName: "GetWxOrder",
			Handler:    _Settle_GetWxOrder_Handler,
		},
		{
			MethodName: "RefundQuota",
			Handler:    _Settle_RefundQuota_Handler,
		},
		{
			MethodName: "GetUserBalance",
			Handler:    _Settle_GetUserBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "settle.proto",
}
