syntax = "proto3";

option go_package = "github.com/nft-rainbow/rainbow-settle/proto";

package rainbowsettle;

message Empty {}

message UserBalance {
  uint32 UserId = 1;
  float Balance = 2;
  float BalanceOnFiatlog = 3;
  float ArrearsQuota = 4;
  float CfxPrice = 5;
}

message UserApiQuotas { map<string, UserApiQuota> Items = 1; }

message UserApiQuota {
  uint32 UserID = 1;
  string CostType = 2;
  uint32 CountReset = 3;
  uint32 CountRollover = 4;
}

message WxOrder {
  optional string CodeUrl = 1;
  optional string H5Url = 2;
  optional string TradeNo = 3;       //`json:"trade_no,omitempty"`
  optional string TradeProvider = 4; //  `json:"trade_provider,omitempty"`
  optional string TradeState = 5;    // `json:"trade_state,omitempty"`
}

message DepositOrder {
  uint32 ID = 1;
  uint32 UserId = 2;
  float Amount = 3;
  uint32 Type = 4;
  uint32 Status = 5;
  string Description = 6;
  string TradeNo = 7;
  string Meta = 8;
}

message UserID { uint32 UserId = 1; }
message ID { uint32 Id = 1; }

message CmbDepositNoDto {
  string Name = 1;
  string Bank = 2;
  string CardNo = 3;
}

message CmbDepositNo {
  uint32 ID = 1;
  uint32 UserId = 2;
  string UserName = 3;
  string UserBankNo = 4;
  string UserBankName = 5;
  string CmbNo = 6;
}

message DepositRequest {
  uint32 UserId = 1;
  float Amount = 2;
  string Description = 3;
}

message WithdrawRequest {
  uint32 UserId = 1;
  float Amount = 2;
  string Reason = 3;
}

message ModelsCmbRecord {
  optional string AccNbr = 1;
  optional string AutFlg = 2;
  optional string CcyNbr = 3;
  optional string CreatedAt = 4;
  optional string DmaNam = 5;
  optional string DmaNbr = 6;
  optional int32 Id = 7;
  optional string NarInn = 8;
  optional string RpyAcc = 9;
  optional string RpyNam = 10;
  optional float TrxAmt = 11;
  optional string TrxDat = 12;
  optional string TrxDir = 13;
  optional string TrxNbr = 14;
  optional string TrxTim = 15;
  optional string TrxTxt = 16;
}

message Pagenation {
  uint32 Offset = 1;
  uint32 Limit = 2;
}

message WxOrderRequest { uint32 ID = 1; }

message RefundApiFeeRequest {
  uint32 UserId = 1;
  string CostType = 2;
  uint32 Count = 3;
}

message BuySponsorRequest {
  uint32 UserId = 1;
  float Amount = 2;
  uint32 TxId = 3;
  string Address = 4;
}

message RefundSponsorRequest {
  uint32 TxId = 1;
}

message CreateCmcDepositNoReqeust {
  uint32 UserId = 1;
  CmbDepositNoDto Info = 2;
}

message UpdateCmcDepositNoRelationRequest {
  uint32 UserId = 1;
  CmbDepositNoDto Info = 2;
}

message BuyDataBundleRequest {
  uint32 UserId = 1;
  uint32 DataBundleId = 2;
  uint32 Count = 4;
}

message UserDataBundle {
  uint32 ID = 1;
  uint32 UserId = 2;
  uint32 DataBundleId = 3;
  uint32 Count = 4;
  string BoughtTime = 5;
}

message BuyBillPlanRequest {
  uint32 UserId = 1;
  uint32 PlanId = 2;
  bool IsAutoRenewal = 3;
}

message UerBillPlan {
  uint32 ID = 1;
  uint32 UserId = 2;
  uint32 PlanId = 3;
  string BoughtTime = 4;
  bool IsAutoRenewal = 5;
}

message UpdateUpdateBillPlanRenewRequest {
  uint32 UserId = 1;
  uint32 ServerType = 2;
  bool IsAutoRenewal = 3;
}

message ApiKeyUpdated {
  string Old = 1;
  string New = 2;
  uint32 UserId = 3;
  uint32 AppId = 4;
}

message QueryRecentCmbHistoryResponse { repeated ModelsCmbRecord List = 1; }

service Settle {
  rpc Deposite(DepositRequest) returns (WxOrder);
  rpc Withdraw(WithdrawRequest) returns (UserBalance);
  rpc GetDepositeOrder(ID) returns (DepositOrder);

  rpc BuyGas(BuySponsorRequest) returns (Empty);
  rpc BuyStorage(BuySponsorRequest) returns (Empty);
  rpc BuyDataBundle(BuyDataBundleRequest) returns (UserDataBundle);
  rpc BuyBillPlan(BuyBillPlanRequest) returns (UerBillPlan);
  rpc UpdateBillPlanRenew(UpdateUpdateBillPlanRenewRequest)
      returns (UerBillPlan);

  rpc RefundSponsor(RefundSponsorRequest) returns (Empty);
  rpc RefundApiFee(RefundApiFeeRequest) returns (Empty);

  rpc GetUserBalance(UserID) returns (UserBalance);
  // rpc GetUserApiQuota(UserID) returns (UserApiQuotas);
  rpc UserCreated(UserID) returns (Empty);
  rpc ApikeyUpdated(ApiKeyUpdated) returns (Empty);

  rpc CreateCmcDepositNo(CreateCmcDepositNoReqeust) returns (Empty);
  rpc GetCmcDepositNo(UserID) returns (CmbDepositNo);
  rpc QueryRecentCmbHistory(Pagenation) returns (QueryRecentCmbHistoryResponse);
  rpc UpdateCmcDepositNoRelation(UpdateCmcDepositNoRelationRequest)
      returns (Empty);

  // rpc UpdateUserArrearsQuota(Empty) returns (Empty);
  // rpc UpdateUserCfxPrice(Empty) returns (Empty);

  // rpc GetCmbDepositNo(UserID) returns (CmbDepositNo);
  // rpc CreateCmbDepositNo(CreateCmbDepositNoRequest) returns (Empty);
  // rpc UpdateCmbDepositNo(UserID) returns (UserBalance);
  // rpc GetCmbRecentDeposits(UserID) returns (UserBalance);
  // rpc GetCmbDepositMeta(UserID) returns (UserBalance);
}

// 查询
// getApiProfile
// getUserApiQuota
// getUserBillPlans
// getUserDataBundles
// getUserBalance